# Generated by Django 2.1.1 on 2019-03-24 16:00

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=30, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('email', models.CharField(max_length=75)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VAccountDetail',
            fields=[
                ('accountid', models.IntegerField(primary_key=True, serialize=False)),
                ('accountname', models.CharField(db_column='accountname', max_length=100)),
                ('authenticationid', models.CharField(blank=True, db_column='authenticationid', max_length=45)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('id', models.IntegerField()),
            ],
            options={
                'db_table': 'v_account_detail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VActualProblemLinks',
            fields=[
                ('problemid', models.IntegerField(db_column='problemid')),
                ('problemlinkid', models.IntegerField(db_column='problemlinkid')),
                ('problemlinktype', models.IntegerField(db_column='problemlinktype')),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('problemlinkname', models.CharField(db_column='problemlinkname', max_length=50)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_actual_problem_links',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VBoard',
            fields=[
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
                ('userid', models.IntegerField(db_column='userid')),
                ('itemid', models.IntegerField(db_column='itemid')),
                ('itemtype', models.IntegerField(db_column='itemtype')),
                ('columnno', models.IntegerField(db_column='columnno')),
                ('itemorder', models.IntegerField(db_column='itemorder')),
                ('description', models.IntegerField(db_column='description')),
            ],
            options={
                'db_table': 'v_board',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VBoardQueue',
            fields=[
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=10000)),
                ('assignedto', models.IntegerField(db_column='assignedto')),
                ('type', models.IntegerField(db_column='type')),
            ],
            options={
                'db_table': 'v_board_queue',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VChartProjectBehindTasks',
            fields=[
                ('projectid', models.IntegerField(db_column='projectid')),
                ('status', models.CharField(blank=True, max_length=50)),
                ('counttasks', models.BigIntegerField(db_column='countTasks')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('taskstartdate', models.DateTimeField(blank=True, db_column='taskstartdate', null=True)),
                ('tasktimeestimate', models.DecimalField(blank=True, db_column='tasktimeestimate', decimal_places=1, max_digits=10, null=True)),
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_chart_project_behind_tasks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VChartTasksByStatus',
            fields=[
                ('projectid', models.IntegerField(db_column='projectid')),
                ('status', models.CharField(blank=True, max_length=50)),
                ('counttasks', models.BigIntegerField(db_column='countTasks')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_chart_tasks_by_status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VClientAdminGroup',
            fields=[
                ('groupid', models.IntegerField(db_column='groupid')),
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_client_admin_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VClientUsers',
            fields=[
                ('clientid', models.IntegerField(db_column='clientid')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('userid', models.IntegerField(db_column='userid')),
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_client_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VCommentsParent',
            fields=[
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('commentid', models.IntegerField(db_column='commentid')),
                ('parentid', models.IntegerField(db_column='parentid')),
                ('parenttypeid', models.IntegerField(db_column='parenttypeid')),
                ('commenttypeid', models.IntegerField(db_column='commenttypeid')),
                ('commenttext', models.CharField(db_column='commenttext', max_length=5000)),
                ('createddate', models.CharField(blank=True, db_column='createddate', max_length=116)),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('lookupvaluechar', models.CharField(blank=True, db_column='lookupvaluechar', max_length=50)),
                ('documentfilename', models.CharField(blank=True, db_column='documentFilename', max_length=100)),
                ('documentname', models.CharField(blank=True, db_column='documentname', max_length=100)),
                ('documenttitle', models.CharField(blank=True, db_column='documentTitle', max_length=100)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_comments_parent',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VErrors',
            fields=[
                ('id', models.IntegerField(db_column='errorid', primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('userid', models.IntegerField(db_column='userid')),
                ('description', models.CharField(db_column='description', max_length=100)),
                ('module', models.CharField(db_column='module', max_length=10)),
                ('submodule', models.CharField(db_column='submodule', max_length=10)),
                ('action', models.CharField(db_column='action', max_length=10)),
                ('subaction', models.CharField(db_column='subaction', max_length=10)),
                ('createddate', models.DateTimeField(db_column='createddate')),
            ],
            options={
                'db_table': 'error',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VImportances',
            fields=[
                ('importanceid', models.IntegerField(blank=True, db_column='importanceid', null=True)),
                ('importancename', models.CharField(blank=True, db_column='importancename', max_length=50)),
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_importances',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VInteractions',
            fields=[
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('interactionid', models.IntegerField(blank=True, db_column='interactionid', null=True)),
                ('details', models.CharField(blank=True, db_column='details', max_length=4000)),
                ('interactiontype', models.CharField(blank=True, db_column='interactiontype', max_length=50)),
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_interactions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VInvoiceDetail',
            fields=[
                ('invoiceid', models.IntegerField(db_column='invoiceid', primary_key=True, serialize=False)),
                ('userid', models.IntegerField(db_column='userid')),
                ('statusid', models.IntegerField(db_column='statusid')),
                ('supersededby', models.IntegerField(blank=True, db_column='supersededby', null=True)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('description', models.CharField(max_length=50)),
                ('comments', models.CharField(max_length=500)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('lineno', models.IntegerField(db_column='lineno')),
                ('taskid', models.IntegerField(db_column='taskid')),
                ('itemdescription', models.CharField(db_column='itemdescription', max_length=150)),
                ('tax1rate', models.DecimalField(db_column='tax1rate', decimal_places=2, max_digits=10)),
                ('tax2rate', models.DecimalField(db_column='tax2rate', decimal_places=2, max_digits=10)),
                ('tax3rate', models.DecimalField(db_column='tax3rate', decimal_places=2, max_digits=10)),
                ('hourlyrate', models.DecimalField(db_column='hourlyrate', decimal_places=2, max_digits=10)),
                ('nohours', models.DecimalField(db_column='nohours', decimal_places=1, max_digits=10)),
                ('agreedrate', models.DecimalField(db_column='agreedrate', decimal_places=1, max_digits=10)),
                ('tax1', models.DecimalField(decimal_places=2, max_digits=10)),
                ('tax2', models.DecimalField(decimal_places=2, max_digits=10)),
                ('tax3', models.DecimalField(decimal_places=2, max_digits=10)),
                ('grosstotal', models.DecimalField(db_column='grosstotal', decimal_places=2, max_digits=10)),
                ('nettotal', models.DecimalField(db_column='nettotal', decimal_places=2, max_digits=10)),
                ('id', models.IntegerField()),
            ],
            options={
                'db_table': 'v_invoice_detail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VLookupsByType',
            fields=[
                ('clientid', models.IntegerField(db_column='clientid')),
                ('lookuptypeid', models.IntegerField(db_column='lookuptypeid')),
                ('lookupsubtypeid', models.IntegerField(db_column='lookupsubtypeid')),
                ('lookuporder', models.IntegerField(db_column='lookuporder')),
                ('lookupvaluenum', models.IntegerField(blank=True, db_column='lookupvaluenum', null=True)),
                ('lookupvaluechar', models.CharField(blank=True, db_column='lookupvaluechar', max_length=50)),
                ('lookupdescription', models.CharField(db_column='lookupdescription', max_length=200)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_lookups_by_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyAssignedprojects',
            fields=[
                ('projectid', models.IntegerField(db_column='projectid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('projectdescription', models.CharField(blank=True, db_column='projectdescription', max_length=500)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('userid', models.IntegerField(db_column='userid')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_my_assignedprojects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyAttentionRequired',
            fields=[
                ('type', models.CharField(max_length=7)),
                ('ordercol', models.BigIntegerField()),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('taskdescription', models.TextField(blank=True, db_column='taskdescription')),
                ('itemid', models.IntegerField(db_column='itemid')),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('userid', models.IntegerField(blank=True, db_column='userid', null=True)),
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_my_attention_required',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyClient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('user_id', models.IntegerField()),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
            ],
            options={
                'db_table': 'v_my_client',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyCriticalWork',
            fields=[
                ('type', models.CharField(max_length=7)),
                ('ordercol', models.BigIntegerField()),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('taskdescription', models.TextField(db_column='taskdescription')),
                ('itemid', models.IntegerField(db_column='itemid')),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
            ],
            options={
                'db_table': 'v_my_critical_work',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyImportantWork',
            fields=[
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('taskdescription', models.TextField(db_column='taskdescription')),
                ('taskid', models.IntegerField(blank=True, db_column='taskid', null=True)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('userid', models.IntegerField(blank=True, db_column='userid', null=True)),
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_my_important_work',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyInvoices',
            fields=[
                ('invoiceid', models.IntegerField(db_column='invoiceid')),
                ('statusid', models.IntegerField(db_column='statusid')),
                ('lookupvaluechar', models.CharField(blank=True, db_column='lookupvaluechar', max_length=50)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('nohours', models.DecimalField(blank=True, db_column='nohours', decimal_places=1, max_digits=32, null=True)),
                ('grosstotal', models.DecimalField(blank=True, db_column='grosstotal', decimal_places=2, max_digits=32, null=True)),
                ('nettotal', models.DecimalField(blank=True, db_column='nettotal', decimal_places=2, max_digits=32, null=True)),
                ('userid', models.IntegerField(db_column='userid')),
                ('createddatef', models.CharField(db_column='createddateF', max_length=20)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
            ],
            options={
                'db_table': 'v_my_invoices',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyInvoiceTimes',
            fields=[
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('tasklistname', models.CharField(db_column='tasklistname', max_length=50)),
                ('taskdescription', models.CharField(db_column='taskdescription', max_length=10000)),
                ('timeday', models.CharField(blank=True, db_column='timeday', max_length=40)),
                ('hours', models.FloatField()),
                ('userid', models.IntegerField(db_column='userid')),
                ('timeid', models.IntegerField(db_column='timeid')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_my_invoice_times',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyItems',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('projectid', models.IntegerField(blank=True, db_column='projectid', null=True)),
                ('userid', models.IntegerField(blank=True, db_column='userid', null=True)),
            ],
            options={
                'db_table': 'v_my_items',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyOrganisationEvents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('createddate', models.DateTimeField(blank=True, db_column='createddate', null=True)),
                ('userid', models.IntegerField(db_column='userid')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('type', models.BigIntegerField()),
            ],
            options={
                'db_table': 'v_my_organisation_events',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyOrganisations',
            fields=[
                ('clientid', models.IntegerField(db_column='clientid', primary_key=True, serialize=False)),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('userid', models.IntegerField(blank=True, db_column='userid', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('id', models.IntegerField()),
            ],
            options={
                'db_table': 'v_my_organisations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyOrgTasks',
            fields=[
                ('userid', models.IntegerField(db_column='userid')),
                ('taskname', models.TextField(db_column='taskname')),
                ('taskid', models.IntegerField(db_column='taskid')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_my_org_tasks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyPriorities',
            fields=[
                ('clientid', models.IntegerField(db_column='clientid')),
                ('lookupdescription', models.CharField(db_column='lookupdescription', max_length=200)),
                ('lookupvaluenum', models.IntegerField(blank=True, db_column='lookupvaluenum', null=True)),
                ('lookupvaluechar', models.CharField(blank=True, db_column='lookupvaluechar', max_length=50)),
                ('lookuporder', models.IntegerField(db_column='lookuporder')),
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_my_priorities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyProblemPriorities',
            fields=[
                ('clientid', models.IntegerField(db_column='clientid')),
                ('lookuptypeid', models.IntegerField(db_column='lookuptypeid')),
                ('lookupsubtypeid', models.IntegerField(db_column='lookupsubtypeid')),
                ('lookuporder', models.IntegerField(db_column='lookuporder')),
                ('lookupvaluenum', models.IntegerField(blank=True, db_column='lookupvaluenum', null=True)),
                ('lookupvaluechar', models.CharField(blank=True, db_column='lookupvaluechar', max_length=50)),
                ('lookupdescription', models.CharField(db_column='lookupdescription', max_length=200)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_my_problem_priorities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyProblems',
            fields=[
                ('problemid', models.IntegerField(db_column='problemid')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('problemtype', models.CharField(blank=True, db_column='problemtype', max_length=200)),
                ('problemheader', models.CharField(db_column='problemheader', max_length=50)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('problemscope', models.CharField(blank=True, db_column='problemScope', max_length=200)),
                ('problemstatus', models.CharField(blank=True, db_column='problemstatus', max_length=200)),
                ('problempriority', models.CharField(blank=True, db_column='problempriority', max_length=200)),
                ('problemscopeid', models.IntegerField(blank=True, db_column='problemScopeid', null=True)),
                ('queueid', models.IntegerField(blank=True, db_column='queueid', null=True)),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, db_column='first_name', max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, db_column='last_name', max_length=50, null=True)),
                ('clientid', models.IntegerField(db_column='clientid')),
            ],
            options={
                'db_table': 'v_my_problems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyProblemScope',
            fields=[
                ('clientid', models.IntegerField(db_column='clientid')),
                ('lookuptypeid', models.IntegerField(db_column='lookuptypeid')),
                ('lookupsubtypeid', models.IntegerField(db_column='lookupsubtypeid')),
                ('lookuporder', models.IntegerField(db_column='lookuporder')),
                ('lookupvaluenum', models.IntegerField(blank=True, db_column='lookupvaluenum', null=True)),
                ('lookupvaluechar', models.CharField(blank=True, db_column='lookupvaluechar', max_length=50)),
                ('lookupdescription', models.CharField(db_column='lookupdescription', max_length=200)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_my_problem_scope',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyProblemStatuses',
            fields=[
                ('clientid', models.IntegerField(db_column='clientid')),
                ('lookuptypeid', models.IntegerField(db_column='lookuptypeid')),
                ('lookupsubtypeid', models.IntegerField(db_column='lookupsubtypeid')),
                ('lookuporder', models.IntegerField(db_column='lookuporder')),
                ('lookupvaluenum', models.IntegerField(blank=True, db_column='lookupvaluenum', null=True)),
                ('lookupvaluechar', models.CharField(blank=True, db_column='lookupvaluechar', max_length=50)),
                ('lookupdescription', models.CharField(db_column='lookupdescription', max_length=200)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_my_problem_statuses',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyProgrammes',
            fields=[
                ('problemid', models.IntegerField(db_column='problemid')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('problemtype', models.CharField(blank=True, db_column='problemtype', max_length=200)),
                ('problemheader', models.CharField(db_column='problemheader', max_length=50)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('problemscope', models.CharField(blank=True, db_column='problemScope', max_length=200)),
                ('problemstatus', models.CharField(blank=True, db_column='problemstatus', max_length=200)),
                ('problempriority', models.CharField(blank=True, db_column='problempriority', max_length=200)),
                ('problemscopeid', models.IntegerField(blank=True, db_column='problemScopeid', null=True)),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, db_column='first_name', max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, db_column='last_name', max_length=50, null=True)),
                ('clientid', models.IntegerField(db_column='clientid')),
            ],
            options={
                'db_table': 'v_my_problems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyProjects',
            fields=[
                ('projectid', models.IntegerField(db_column='projectid')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('projectdescription', models.CharField(blank=True, db_column='projectdescription', max_length=500)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('userid', models.IntegerField(db_column='userid')),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
            ],
            options={
                'db_table': 'v_my_projects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyReports',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lookupvaluenum', models.IntegerField(blank=True, db_column='lookupvaluenum', null=True)),
                ('lookupvaluechar', models.CharField(blank=True, db_column='lookupvaluechar', max_length=50)),
                ('userid', models.IntegerField(db_column='userid')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
            ],
            options={
                'db_table': 'v_my_reports',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyStatuses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('lookupdescription', models.CharField(db_column='lookupdescription', max_length=200)),
                ('lookupvaluenum', models.IntegerField(blank=True, db_column='lookupvaluenum', null=True)),
                ('lookupvaluechar', models.CharField(blank=True, db_column='lookupvaluechar', max_length=50)),
            ],
            options={
                'db_table': 'v_my_statuses',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyTasks',
            fields=[
                ('projectid', models.IntegerField(db_column='projectid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('tasklistid', models.IntegerField(db_column='tasklistid')),
                ('tasklistname', models.CharField(db_column='tasklistname', max_length=50)),
                ('taskid', models.IntegerField(db_column='taskid')),
                ('taskname', models.CharField(db_column='taskname', max_length=50)),
                ('taskdescription', models.CharField(db_column='taskdescription', max_length=10000)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('taskstatusid', models.IntegerField(db_column='taskstatusid')),
                ('taskpriorityid', models.IntegerField(db_column='taskpriorityid')),
            ],
            options={
                'db_table': 'v_my_tasks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyTasktypes',
            fields=[
                ('clientid', models.IntegerField(db_column='clientid')),
                ('lookupdescription', models.CharField(db_column='lookupdescription', max_length=200)),
                ('lookupvaluenum', models.IntegerField(blank=True, db_column='lookupvaluenum', null=True)),
                ('lookupvaluechar', models.CharField(blank=True, db_column='lookupvaluechar', max_length=50)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_my_tasktypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyTime',
            fields=[
                ('timeid', models.IntegerField(db_column='timeid')),
                ('timeday', models.CharField(blank=True, db_column='timeday', max_length=40)),
                ('timedayraw', models.DateTimeField(db_column='timedayraw')),
                ('hours', models.FloatField()),
                ('taskid', models.IntegerField(db_column='taskid')),
                ('timetypeid', models.IntegerField(db_column='timetypeid')),
                ('userid', models.IntegerField(db_column='userid')),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('comments', models.CharField(blank=True, max_length=50)),
                ('taskdescription', models.CharField(db_column='taskdescription', max_length=10000)),
                ('lookupvaluechar', models.CharField(blank=True, db_column='lookupvaluechar', max_length=50)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
            ],
            options={
                'db_table': 'v_my_time',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyTimesheet',
            fields=[
                ('timeid', models.IntegerField(db_column='timeid')),
                ('timeday', models.DateTimeField()),
                ('timedayf', models.CharField(blank=True, db_column='timedayF', max_length=40)),
                ('taskname', models.CharField(db_column='taskname', max_length=50)),
                ('taskdescription', models.TextField(blank=True, db_column='taskdescription')),
                ('hours', models.FloatField(blank=True, null=True)),
                ('userid', models.IntegerField(blank=True, db_column='userid', null=True)),
                ('timetypeid', models.IntegerField(db_column='timetypeid')),
                ('lookuptypeid', models.IntegerField(db_column='lookuptypeid')),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_my_timesheet',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VMyUsers',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('active', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=101)),
                ('userid', models.IntegerField(db_column='userid')),
                ('activedesc', models.CharField(db_column='activeDesc', max_length=3)),
                ('id', models.IntegerField()),
            ],
            options={
                'db_table': 'v_my_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VNewUserEmails',
            fields=[
                ('email', models.CharField(max_length=100)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_new_user_emails',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VOrganisationActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activityid', models.IntegerField(db_column='activityid')),
                ('userid', models.IntegerField(db_column='userid')),
                ('activitydata', models.CharField(blank=True, db_column='activitydata', max_length=100)),
                ('organisationid', models.IntegerField(db_column='organisationid')),
            ],
            options={
                'db_table': 'v_organisation_activity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VOrganisationPotentialUsers',
            fields=[
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('company', models.IntegerField(db_column='company')),
                ('clientid', models.IntegerField(db_column='clientid')),
            ],
            options={
                'db_table': 'v_organisation_potential_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VOrganisationProjectManagers',
            fields=[
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('userid', models.IntegerField(db_column='userid')),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_organisation_project_managers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VOrganisationProjectUsers',
            fields=[
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('userid', models.IntegerField(db_column='userid')),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_organisation_project_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VOrganisations',
            fields=[
                ('organisationid', models.IntegerField(db_column='organisationid', primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('userid', models.IntegerField(blank=True, db_column='userid', null=True)),
            ],
            options={
                'db_table': 'v_organisations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VOrganisationUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('clientid', models.IntegerField(db_column='clientid')),
            ],
            options={
                'db_table': 'v_organisation_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProblemActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemid', models.IntegerField(db_column='itemid')),
                ('activity', models.CharField(max_length=6)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'db_table': 'v_problem_activity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProblemAssignees',
            fields=[
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('userid', models.IntegerField()),
                ('problemid', models.IntegerField(db_column='problemid')),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_problem_assignees',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProblemEdit',
            fields=[
                ('clientid', models.IntegerField(db_column='clientid')),
                ('problemid', models.IntegerField(db_column='problemid')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('problemdescription', models.CharField(db_column='problemdescription', max_length=2000)),
                ('noofpeopleaffected', models.IntegerField(db_column='noofpeopleaffected')),
                ('problemscopeid', models.IntegerField(db_column='problemScopeid')),
                ('problemsubtypeid', models.IntegerField(blank=True, db_column='problemsubtypeid', null=True)),
                ('problemtypeid', models.IntegerField(db_column='problemtypeid')),
                ('problemstatusid', models.IntegerField(blank=True, db_column='problemstatusid', null=True)),
                ('problempriorityid', models.IntegerField(blank=True, db_column='problempriorityid', null=True)),
                ('problemheader', models.CharField(db_column='problemheader', max_length=50)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('queueid', models.IntegerField(db_column='queueid')),
            ],
            options={
                'db_table': 'v_problem_edit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProblemJson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_exp_1', models.CharField(blank=True, db_column='name_exp_1', max_length=343)),
            ],
            options={
                'db_table': 'v_problem_json',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProblems',
            fields=[
                ('clientid', models.IntegerField(db_column='clientid')),
                ('problemid', models.IntegerField(db_column='problemid', primary_key=True, serialize=False)),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('problemtype', models.CharField(blank=True, db_column='problemtype', max_length=200)),
                ('problemdescription', models.CharField(db_column='problemdescription', max_length=2000)),
                ('noofpeopleaffected', models.IntegerField(db_column='noofpeopleaffected')),
                ('scope', models.IntegerField()),
                ('problemheader', models.CharField(db_column='problemheader', max_length=50)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('lookupdescription', models.CharField(blank=True, db_column='lookupdescription', max_length=200)),
                ('problemscope', models.CharField(blank=True, db_column='problemScope', max_length=200)),
                ('problemstatus', models.CharField(blank=True, db_column='problemstatus', max_length=200)),
                ('problempriority', models.CharField(blank=True, db_column='problempriority', max_length=200)),
                ('problemscopeid', models.IntegerField(blank=True, db_column='problemScopeid', null=True)),
                ('problempriorityid', models.IntegerField(blank=True, db_column='problempriorityid', null=True)),
                ('problemstatusid', models.IntegerField(blank=True, db_column='problemstatusid', null=True)),
                ('queuename', models.IntegerField(blank=True, db_column='queuename', null=True)),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('createddate', models.CharField(db_column='createddate', max_length=40)),
                ('first_name', models.CharField(db_column='first_name', max_length=50)),
                ('last_name', models.CharField(db_column='last_name', max_length=50)),
                ('id', models.IntegerField()),
            ],
            options={
                'db_table': 'v_problems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProjectActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activityid', models.IntegerField(db_column='activityid')),
                ('userid', models.IntegerField(db_column='userid')),
                ('activitytypeid', models.IntegerField(db_column='activitytypeid')),
                ('activitydata', models.CharField(blank=True, db_column='activitydata', max_length=100)),
                ('activityprojectid', models.IntegerField(blank=True, db_column='activityProjectid', null=True)),
                ('activitytasklistid', models.IntegerField(blank=True, db_column='activityTasklistid', null=True)),
                ('activitytaskid', models.IntegerField(blank=True, db_column='activityTaskid', null=True)),
                ('activitydate', models.DateTimeField(db_column='activityDate')),
                ('taskid', models.IntegerField(blank=True, db_column='taskid', null=True)),
                ('tasklistid', models.IntegerField(blank=True, db_column='tasklistid', null=True)),
                ('tasktypeid', models.IntegerField(blank=True, db_column='tasktypeid', null=True)),
                ('taskdescription', models.CharField(blank=True, db_column='taskdescription', max_length=10000)),
                ('taskstatusid', models.IntegerField(blank=True, db_column='taskstatusid', null=True)),
                ('taskpriorityid', models.IntegerField(blank=True, db_column='taskpriorityid', null=True)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('createddate', models.DateTimeField(blank=True, db_column='createddate', null=True)),
                ('createdby', models.IntegerField(blank=True, db_column='createdby', null=True)),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'db_table': 'v_project_activity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProjectAssignees',
            fields=[
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('userid', models.IntegerField()),
                ('taskid', models.IntegerField(db_column='taskid')),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_project_assignees',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProjectDetail',
            fields=[
                ('projectid', models.IntegerField(db_column='projectid')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('programmeid', models.IntegerField(blank=True, db_column='programmeid', null=True)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('projectdescription', models.CharField(blank=True, db_column='projectdescription', max_length=500)),
                ('stakeholderid', models.IntegerField(blank=True, db_column='stakeholderid', null=True)),
                ('projectmanagerid', models.IntegerField(blank=True, db_column='projectmanagerid', null=True)),
                ('deliverables', models.CharField(blank=True, max_length=1500)),
                ('budget', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True)),
                ('importance', models.IntegerField(blank=True, null=True)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('organisationname', models.CharField(blank=True, db_column='organisationname', max_length=100)),
                ('shfirstname', models.CharField(blank=True, db_column='shFirstname', max_length=50)),
                ('shlastname', models.CharField(blank=True, db_column='shLastname', max_length=50)),
                ('importancedescription', models.CharField(blank=True, db_column='importancedescription', max_length=50)),
                ('pmfirstname', models.CharField(blank=True, db_column='pmFirstname', max_length=50)),
                ('pmlastname', models.CharField(blank=True, db_column='pmLastname', max_length=50)),
                ('userid', models.IntegerField(db_column='userid')),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_project_detail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProjectDocuments',
            fields=[
                ('documentid', models.IntegerField(db_column='documentid')),
                ('documenttypeid', models.IntegerField(db_column='documenttypeid')),
                ('documentparentid', models.IntegerField(db_column='documentparentid')),
                ('documentname', models.CharField(db_column='documentname', max_length=100)),
                ('documentfilename', models.CharField(db_column='documentFilename', max_length=100)),
                ('documenttitle', models.CharField(blank=True, db_column='documentTitle', max_length=100)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_project_documents',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProjectGantt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('projectdescription', models.CharField(blank=True, db_column='projectdescription', max_length=500)),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('tasklistid', models.IntegerField(blank=True, db_column='tasklistid', null=True)),
                ('tasklistname', models.CharField(blank=True, db_column='tasklistname', max_length=50)),
                ('tasklistdescription', models.CharField(blank=True, db_column='tasklistdescription', max_length=500)),
                ('taskid', models.IntegerField(blank=True, db_column='taskid', null=True)),
                ('taskdescription', models.CharField(blank=True, db_column='taskdescription', max_length=10000)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('taskstartdate', models.DateTimeField(blank=True, db_column='taskstartdate', null=True)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('taskenddate', models.DateTimeField(blank=True, db_column='taskEnddate', null=True)),
                ('tasktimeestimate', models.DecimalField(blank=True, db_column='tasktimeestimate', decimal_places=1, max_digits=10, null=True)),
                ('taskdeleteddate', models.DateTimeField(blank=True, db_column='taskDeleteddate', null=True)),
            ],
            options={
                'db_table': 'v_project_gantt',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProjectganttJq',
            fields=[
                ('projectid', models.IntegerField(db_column='projectid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('projectdescription', models.CharField(blank=True, db_column='projectdescription', max_length=500)),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('tasklistid', models.IntegerField(db_column='tasklistid')),
                ('tasklistname', models.CharField(db_column='tasklistname', max_length=50)),
                ('tasklistdescription', models.CharField(blank=True, db_column='tasklistdescription', max_length=500)),
                ('taskid', models.IntegerField(db_column='taskid')),
                ('taskdescription', models.CharField(db_column='taskdescription', max_length=10000)),
                ('taskorderid', models.BigIntegerField(db_column='taskorderid')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('taskstartdate', models.BigIntegerField(blank=True, db_column='taskstartdate', null=True)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('taskenddate', models.BigIntegerField(blank=True, db_column='taskEnddate', null=True)),
                ('tasktimeestimate', models.DecimalField(blank=True, db_column='tasktimeestimate', decimal_places=1, max_digits=10, null=True)),
                ('taskstartdate_unformatted', models.DateTimeField(blank=True, db_column='taskstartdate_unformatted', null=True)),
                ('time_estimate', models.DecimalField(blank=True, decimal_places=1, max_digits=10, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_projectgantt_jq',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProjectOpinion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('opinionid', models.IntegerField(db_column='opinionid')),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('userid', models.IntegerField(db_column='userid')),
                ('itemid', models.IntegerField(db_column='itemid')),
                ('itemtype', models.IntegerField(db_column='itemtype')),
                ('opiniontype', models.IntegerField(blank=True, db_column='opiniontype', null=True)),
                ('opinion', models.CharField(blank=True, max_length=250)),
            ],
            options={
                'db_table': 'v_project_opinion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProjectOpinionDetail',
            fields=[
                ('opinionid', models.IntegerField(db_column='opinionid')),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('userid', models.IntegerField(db_column='userid')),
                ('itemid', models.IntegerField(db_column='itemid')),
                ('itemtype', models.IntegerField(db_column='itemtype')),
                ('opiniontype', models.IntegerField(blank=True, db_column='opiniontype', null=True)),
                ('opiniondescription', models.CharField(blank=True, db_column='opiniondescription', max_length=50)),
                ('username', models.CharField(blank=True, db_column='username', max_length=101)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_project_opinion_detail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProjectPie',
            fields=[
                ('projectid', models.IntegerField(db_column='projectid')),
                ('tasklistname', models.CharField(blank=True, db_column='tasklistname', max_length=50)),
                ('counttasks', models.BigIntegerField(db_column='countTasks')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_project_pie',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProjectTasklists',
            fields=[
                ('projectid', models.IntegerField(db_column='projectid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('tasklistid', models.IntegerField(db_column='tasklistid')),
                ('tasklistname', models.CharField(db_column='tasklistname', max_length=50)),
                ('userid', models.IntegerField(db_column='userid')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_project_tasklists',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProjectTasks',
            fields=[
                ('projectid', models.IntegerField(db_column='projectid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('projectdescription', models.CharField(blank=True, db_column='projectdescription', max_length=500)),
                ('tasklistid', models.IntegerField(db_column='tasklistid')),
                ('tasklistname', models.CharField(db_column='tasklistname', max_length=50)),
                ('tasklistdescription', models.CharField(blank=True, db_column='tasklistdescription', max_length=500)),
                ('taskid', models.IntegerField(blank=True, db_column='taskid', null=True)),
                ('taskname', models.CharField(blank=True, db_column='taskname', max_length=50)),
                ('taskdescription', models.CharField(blank=True, db_column='taskdescription', max_length=10000)),
                ('taskdescriptionshort', models.CharField(blank=True, db_column='taskdescriptionShort', max_length=83)),
                ('tasktypeid', models.IntegerField(blank=True, db_column='tasktypeid', null=True)),
                ('taskstatusid', models.IntegerField(blank=True, db_column='taskstatusid', null=True)),
                ('taskpriorityid', models.IntegerField(blank=True, db_column='taskpriorityid', null=True)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('taskstatus', models.CharField(blank=True, db_column='taskstatus', max_length=50)),
                ('taskpriority', models.CharField(blank=True, db_column='taskpriority', max_length=50)),
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('taskcreatedby', models.IntegerField(blank=True, db_column='taskCreatedby', null=True)),
                ('taskdeletedby', models.IntegerField(blank=True, db_column='task_deleted_by', null=True)),
                ('tasklistdeletedby', models.IntegerField(blank=True, db_column='tasklist_deleted_by', null=True)),
            ],
            options={
                'db_table': 'v_project_tasks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProjectUserEmails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=100)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('projectid', models.IntegerField(db_column='projectid')),
            ],
            options={
                'db_table': 'v_project_user_emails',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VProjectUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('userid', models.IntegerField()),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('tasklistid', models.IntegerField(db_column='tasklistid')),
                ('taskid', models.IntegerField(db_column='taskid')),
            ],
            options={
                'db_table': 'v_project_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VQueueTeams',
            fields=[
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
                ('teamid', models.IntegerField(db_column='teamid')),
                ('queueid', models.IntegerField(db_column='queueid')),
                ('teamname', models.CharField(blank=True, max_length=50)),
                ('deleteddate', models.DateTimeField(db_column='deleteddate')),
            ],
            options={
                'db_table': 'v_queue_teams',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VQueueUsers',
            fields=[
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
                ('userid', models.IntegerField(db_column='userid')),
                ('queueid', models.IntegerField(db_column='queueid')),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('deleteddate', models.DateTimeField(db_column='deleteddate')),
            ],
            options={
                'db_table': 'v_queue_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VRegisteredUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.IntegerField(db_column='userid')),
                ('email', models.CharField(max_length=100)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('company', models.IntegerField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
            ],
            options={
                'db_table': 'v_registered_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phaseid', models.IntegerField(db_column='phaseid')),
                ('phasename', models.CharField(db_column='phasename', max_length=50)),
                ('phasedescription', models.CharField(blank=True, db_column='phasedescription', max_length=500)),
                ('startdate', models.DateTimeField(blank=True, db_column='startdate', null=True)),
                ('taskname', models.CharField(db_column='taskname', max_length=50)),
                ('taskid', models.IntegerField(db_column='taskid')),
                ('assignedto', models.IntegerField(db_column='assignedto')),
                ('clientid', models.IntegerField(db_column='clientid')),
            ],
            options={
                'db_table': 'v_schedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VSearch',
            fields=[
                ('projectid', models.IntegerField(db_column='projectid')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('projectdescription', models.CharField(blank=True, db_column='projectdescription', max_length=500)),
                ('tasklistid', models.IntegerField(blank=True, db_column='tasklistid', null=True)),
                ('tasklistname', models.CharField(blank=True, db_column='tasklistname', max_length=50)),
                ('tasklistdescription', models.CharField(blank=True, db_column='tasklistdescription', max_length=500)),
                ('taskid', models.IntegerField(blank=True, db_column='taskid', null=True)),
                ('taskname', models.CharField(blank=True, db_column='taskname', max_length=50)),
                ('taskdescription', models.CharField(blank=True, db_column='taskdescription', max_length=10000)),
                ('userid', models.IntegerField(db_column='userid')),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('clientid', models.IntegerField()),
            ],
            options={
                'db_table': 'v_search',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VSubscribersRecent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accountname', models.CharField(db_column='accountname', max_length=100)),
                ('authenticationid', models.CharField(blank=True, db_column='authenticationid', max_length=45)),
                ('authenticationid2', models.CharField(blank=True, db_column='authenticationid2', max_length=45)),
                ('authenticationid3', models.CharField(blank=True, db_column='authenticationid3', max_length=45)),
                ('clientname', models.CharField(blank=True, db_column='clientname', max_length=100)),
                ('city', models.CharField(blank=True, max_length=45)),
                ('country', models.CharField(blank=True, max_length=50)),
                ('createddate', models.DateTimeField(db_column='createddate')),
            ],
            options={
                'db_table': 'v_subscribers_recent',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VSubscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('authenticationid', models.CharField(blank=True, db_column='authenticationid', max_length=45)),
                ('authenticationid2', models.CharField(blank=True, db_column='authenticationid2', max_length=45)),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('firstname', models.CharField(blank=True, max_length=50)),
                ('lastname', models.CharField(blank=True, max_length=50)),
                ('phone', models.CharField(blank=True, max_length=50)),
                ('email', models.CharField(blank=True, max_length=75)),
            ],
            options={
                'db_table': 'v_subscription',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VSuggestProblemLinks',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('value', models.CharField(max_length=50)),
                ('userid', models.IntegerField(db_column='userid')),
            ],
            options={
                'db_table': 'v_suggest_problem_links',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VSuggestProjectLinks',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('value', models.CharField(max_length=50)),
                ('userid', models.IntegerField(db_column='userid')),
            ],
            options={
                'db_table': 'v_suggest_project_links',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTaskDependency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taskid', models.IntegerField(db_column='taskid')),
                ('tasklistid', models.IntegerField(db_column='tasklistid')),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('tasktypeid', models.IntegerField(db_column='tasktypeid')),
                ('taskname', models.CharField(db_column='taskname', max_length=50)),
                ('taskdescription', models.CharField(db_column='taskdescription', max_length=10000)),
                ('taskstatusid', models.IntegerField(blank=True, db_column='taskstatusid', null=True)),
                ('taskpriorityid', models.IntegerField(blank=True, db_column='taskpriorityid', null=True)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('taskstartdate', models.DateTimeField(blank=True, db_column='taskstartdate', null=True)),
                ('tasktimeestimate', models.DecimalField(blank=True, db_column='tasktimeestimate', decimal_places=1, max_digits=10, null=True)),
                ('taskpercentcomplete', models.IntegerField(blank=True, db_column='taskpercentcomplete', null=True)),
            ],
            options={
                'db_table': 'v_task_dependency',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTaskDetail',
            fields=[
                ('taskid', models.IntegerField(db_column='taskid')),
                ('taskname', models.CharField(blank=True, db_column='taskname', max_length=50)),
                ('taskdescription', models.CharField(db_column='taskdescription', max_length=10000)),
                ('tasktypeid', models.IntegerField(db_column='tasktypeid')),
                ('taskpriority', models.CharField(blank=True, db_column='taskpriority', max_length=50)),
                ('taskstatus', models.CharField(blank=True, db_column='taskstatus', max_length=50)),
                ('taskpriorityid', models.IntegerField(blank=True, db_column='taskpriorityid', null=True)),
                ('taskstatusid', models.IntegerField(blank=True, db_column='taskstatusid', null=True)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('assignedtoname', models.CharField(blank=True, db_column='assignedtoname', max_length=101)),
                ('taskstartdate', models.CharField(blank=True, db_column='taskstartdate', max_length=10)),
                ('tasktimeestimate', models.DecimalField(blank=True, db_column='tasktimeestimate', decimal_places=1, max_digits=10, null=True)),
                ('taskpercentcomplete', models.IntegerField(blank=True, db_column='taskpercentcomplete', null=True)),
                ('completiondate', models.CharField(blank=True, db_column='completiondate', max_length=10)),
                ('phaseid', models.IntegerField(blank=True, db_column='phaseid', null=True)),
                ('phasename', models.CharField(db_column='phasename', max_length=50)),
                ('tasklinkid', models.IntegerField(blank=True, db_column='tasklinkid', null=True)),
                ('linkedtaskid', models.IntegerField(blank=True, db_column='linkedTaskid', null=True)),
                ('linkedtaskname', models.CharField(blank=True, db_column='linkedTaskname', max_length=50)),
                ('linkedtaskdescription', models.CharField(blank=True, db_column='linkedTaskdescription', max_length=10000)),
                ('userid', models.IntegerField(db_column='userid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('tasklistname', models.CharField(db_column='tasklistname', max_length=50)),
                ('tasklistid', models.IntegerField(db_column='tasklistid')),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
            ],
            options={
                'db_table': 'v_task_detail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTaskDocuments',
            fields=[
                ('documentid', models.IntegerField(db_column='documentid')),
                ('documenttypeid', models.IntegerField(db_column='documenttypeid')),
                ('documentparentid', models.IntegerField(db_column='documentparentid')),
                ('documentname', models.CharField(db_column='documentname', max_length=100)),
                ('documentfilename', models.CharField(db_column='documentFilename', max_length=100)),
                ('documenttitle', models.CharField(blank=True, db_column='documentTitle', max_length=100)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_task_documents',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTaskLinks',
            fields=[
                ('taskid', models.IntegerField(db_column='taskid')),
                ('tasklistid', models.IntegerField(db_column='tasklistid')),
                ('taskidin', models.IntegerField(db_column='taskidIn')),
                ('tasklistidin', models.IntegerField(db_column='tasklistidIn')),
                ('taskdescription', models.CharField(db_column='taskdescription', max_length=23)),
                ('taskname', models.CharField(db_column='taskname', max_length=50)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_task_links',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTasklistProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('tasklistid', models.IntegerField(db_column='tasklistid')),
                ('tasklistname', models.CharField(db_column='tasklistname', max_length=50)),
                ('tasklistdescription', models.CharField(blank=True, db_column='tasklistdescription', max_length=500)),
                ('clientid', models.IntegerField(db_column='clientid')),
            ],
            options={
                'db_table': 'v_tasklist_project',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTasklistTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tasklistid', models.IntegerField(db_column='tasklistid')),
                ('tasklistname', models.CharField(db_column='tasklistname', max_length=50)),
                ('tasklistdescription', models.CharField(blank=True, db_column='tasklistdescription', max_length=500)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('taskid', models.IntegerField(db_column='taskid')),
                ('taskdescription', models.CharField(db_column='taskdescription', max_length=10000)),
                ('taskname', models.CharField(db_column='taskname', max_length=83)),
                ('taskpriorityid', models.IntegerField(blank=True, db_column='taskpriorityid', null=True)),
                ('taskstatusid', models.IntegerField(blank=True, db_column='taskstatusid', null=True)),
                ('taskstatus', models.CharField(blank=True, db_column='taskstatus', max_length=50)),
                ('taskpriority', models.CharField(blank=True, db_column='taskpriority', max_length=50)),
            ],
            options={
                'db_table': 'v_tasklist_task',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTasklistUsers',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('tasklistid', models.IntegerField(db_column='tasklistid')),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('clientid', models.IntegerField(db_column='clientid')),
            ],
            options={
                'db_table': 'v_tasklist_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTasklistUsersDistinct',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('clientid', models.IntegerField(db_column='clientid')),
            ],
            options={
                'db_table': 'v_tasklist_users_distinct',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTaskStatuses',
            fields=[
                ('clientid', models.IntegerField(db_column='clientid')),
                ('lookupdescription', models.CharField(db_column='lookupdescription', max_length=200)),
                ('lookupvaluenum', models.IntegerField(blank=True, db_column='lookupvaluenum', null=True)),
                ('lookupvaluechar', models.CharField(blank=True, db_column='lookupvaluechar', max_length=50)),
                ('lookuporder', models.IntegerField(db_column='lookuporder')),
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_task_statuses',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTaskUserEmails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=100)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('taskid', models.IntegerField(db_column='taskid')),
            ],
            options={
                'db_table': 'v_task_user_emails',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTaskUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('userid', models.IntegerField()),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('tasklistid', models.IntegerField(db_column='tasklistid')),
                ('taskid', models.IntegerField(db_column='taskid')),
            ],
            options={
                'db_table': 'v_task_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTeamMembers',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('teamid', models.IntegerField(db_column='teamid')),
                ('teamname', models.CharField(db_column='teamname', max_length=50)),
                ('userid', models.IntegerField(db_column='userid')),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
            ],
            options={
                'db_table': 'v_team_members',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTimeCalendar',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=10000)),
                ('start', models.CharField(blank=True, max_length=10)),
                ('url', models.IntegerField()),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('userid', models.IntegerField(db_column='userid')),
                ('clientid', models.IntegerField(db_column='clientid')),
            ],
            options={
                'db_table': 'v_time_calendar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTimeDetail',
            fields=[
                ('timeid', models.IntegerField(db_column='timeid')),
                ('timeday', models.CharField(blank=True, db_column='timeday', max_length=40)),
                ('hours', models.FloatField()),
                ('taskid', models.IntegerField(db_column='taskid')),
                ('timetypeid', models.IntegerField(db_column='timetypeid')),
                ('userid', models.IntegerField(db_column='userid')),
                ('taskname', models.CharField(db_column='taskname', max_length=10000)),
                ('lookupvaluechar', models.CharField(blank=True, db_column='lookupvaluechar', max_length=50)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('comments', models.CharField(blank=True, max_length=50)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_time_detail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTimeGrid',
            fields=[
                ('project', models.CharField(max_length=50)),
                ('projectid', models.IntegerField()),
                ('tasklist', models.CharField(max_length=50)),
                ('tasklistid', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('task', models.CharField(max_length=10000)),
                ('taskid', models.IntegerField()),
                ('timeday', models.DateTimeField(db_column='timeday')),
                ('timedaydate', models.DateField(blank=True, db_column='timedayDate', null=True)),
                ('starthour', models.CharField(blank=True, max_length=7)),
                ('startmin', models.CharField(blank=True, max_length=2)),
                ('hours', models.FloatField()),
                ('mins', models.FloatField()),
                ('minsformat', models.FloatField()),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('clientid', models.IntegerField(db_column='clientid')),
            ],
            options={
                'db_table': 'v_time_grid',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTimeTask',
            fields=[
                ('project', models.CharField(max_length=50)),
                ('projectid', models.IntegerField()),
                ('tasklist', models.CharField(max_length=50)),
                ('tasklistid', models.IntegerField()),
                ('task', models.CharField(max_length=50)),
                ('taskid', models.IntegerField()),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
            ],
            options={
                'db_table': 'v_time_task',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VTimeType',
            fields=[
                ('lookupvaluenum', models.IntegerField(blank=True, db_column='lookupvaluenum', null=True)),
                ('lookupvaluechar', models.CharField(blank=True, db_column='lookupvaluechar', max_length=50)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_time_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VUserAssigned',
            fields=[
                ('projectid', models.IntegerField(db_column='projectid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('tasklistid', models.IntegerField(db_column='tasklistid')),
                ('tasklistname', models.CharField(db_column='tasklistname', max_length=50)),
                ('taskid', models.IntegerField(db_column='taskid')),
                ('taskdescription', models.CharField(db_column='taskdescription', max_length=10000)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_user_assigned',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VUserAttributes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.IntegerField(db_column='userid')),
                ('vip', models.CharField(max_length=1)),
            ],
            options={
                'db_table': 'v_user_attributes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VUserContextFull',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('username', models.CharField(max_length=30)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('issuperuser', models.IntegerField(db_column='isSuperuser')),
                ('isstaff', models.IntegerField(db_column='isStaff')),
            ],
            options={
                'db_table': 'v_user_context_full',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VUserContextMinimal',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('username', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'v_user_context_minimal',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VUserCurrentProjects',
            fields=[
                ('userid', models.IntegerField(db_column='userid')),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'v_user_current_projects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VUserDetail',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=100)),
                ('email', models.CharField(max_length=100)),
                ('active', models.IntegerField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('vip', models.CharField(blank=True, max_length=1)),
                ('pay_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('tax_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('is_staff', models.IntegerField(blank=True, null=True)),
                ('is_superuser', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'v_user_detail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VUserGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.IntegerField(db_column='userid')),
                ('group_id', models.IntegerField()),
                ('name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'v_user_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VUserGroupDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.IntegerField(db_column='userid')),
                ('group_id', models.IntegerField()),
                ('name', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'v_user_group_detail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VUserLogin',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=100)),
                ('email', models.CharField(max_length=100)),
                ('active', models.IntegerField(blank=True, null=True)),
                ('password', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'v_user_login',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VUserPotentialProjects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('userid', models.IntegerField(db_column='userid')),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
            ],
            options={
                'db_table': 'v_user_potential_projects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VUserProjects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.IntegerField(db_column='userid')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
            ],
            options={
                'db_table': 'v_user_projects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VUsers',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=100)),
                ('email', models.CharField(max_length=100)),
                ('active', models.IntegerField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
            ],
            options={
                'db_table': 'v_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VwSelectOrganisationDetailSidebar',
            fields=[
                ('description', models.CharField(max_length=50)),
                ('column2', models.CharField(blank=True, max_length=49)),
                ('id', models.CharField(max_length=11)),
                ('column4', models.BigIntegerField()),
                ('organisationid', models.CharField(db_column='organisationid', max_length=11, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'vw_select_organisation_detail_sidebar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VwSelectOrganisationIndexSidebar',
            fields=[
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('column2', models.CharField(blank=True, max_length=100)),
                ('id', models.CharField(max_length=11)),
                ('column4', models.BigIntegerField()),
                ('userid', models.CharField(db_column='userid', max_length=8, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'vw_select_organisation_index_sidebar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VwSelectProblemDetailSidebar',
            fields=[
                ('description', models.CharField(max_length=13)),
                ('column2', models.CharField(blank=True, max_length=40)),
                ('id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('column4', models.BigIntegerField()),
                ('problemid', models.IntegerField(db_column='problemid')),
            ],
            options={
                'db_table': 'vw_select_problem_detail_sidebar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VwSelectProblemIndexSidebar',
            fields=[
                ('problemname', models.CharField(db_column='problemname', max_length=50)),
                ('column2', models.CharField(blank=True, max_length=40)),
                ('id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('column4', models.BigIntegerField()),
                ('userid', models.CharField(db_column='userid', max_length=8)),
            ],
            options={
                'db_table': 'vw_select_problem_index_sidebar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VwSelectProgrammeHistory',
            fields=[
                ('description', models.CharField(db_column='description', max_length=50)),
                ('column2', models.CharField(blank=True, max_length=40)),
                ('id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('column4', models.BigIntegerField()),
                ('programmeid', models.CharField(db_column='programmeid', max_length=8)),
            ],
            options={
                'db_table': 'vw_select_programme_history',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VwSelectProgrammeIndexSidebar',
            fields=[
                ('problemname', models.CharField(db_column='problemname', max_length=50)),
                ('column2', models.CharField(blank=True, max_length=40)),
                ('id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('column4', models.BigIntegerField()),
                ('userid', models.CharField(db_column='userid', max_length=8)),
            ],
            options={
                'db_table': 'vw_select_problem_index_sidebar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VwSelectProjectDetailSidebar',
            fields=[
                ('description', models.CharField(max_length=50)),
                ('column2', models.CharField(blank=True, max_length=49)),
                ('id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('column4', models.BigIntegerField()),
                ('projectid', models.BigIntegerField(db_column='projectid')),
            ],
            options={
                'db_table': 'vw_select_project_detail_sidebar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VwSelectProjectIndexSidebar',
            fields=[
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('column2', models.CharField(blank=True, max_length=100)),
                ('id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('column4', models.BigIntegerField()),
                ('userid', models.CharField(db_column='userid', max_length=8)),
                ('dateorder', models.CharField(blank=True, max_length=23)),
            ],
            options={
                'db_table': 'vw_select_project_index_sidebar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VwSelectTaskDetailSidebar',
            fields=[
                ('description', models.CharField(max_length=32)),
                ('column2', models.CharField(blank=True, max_length=40)),
                ('id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('column4', models.BigIntegerField()),
                ('taskid', models.CharField(db_column='taskid', max_length=11)),
            ],
            options={
                'db_table': 'vw_select_task_detail_sidebar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VwSelectTaskIndexSidebar',
            fields=[
                ('taskname', models.TextField(db_column='taskname')),
                ('column2', models.CharField(blank=True, max_length=101)),
                ('id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('column4', models.BigIntegerField()),
                ('userid', models.CharField(db_column='userid', max_length=8)),
            ],
            options={
                'db_table': 'vw_select_task_index_sidebar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VwSelectTimeDetailSidebar',
            fields=[
                ('description', models.CharField(max_length=11)),
                ('column2', models.CharField(blank=True, max_length=40)),
                ('id', models.CharField(max_length=1, primary_key=True, serialize=False)),
                ('column4', models.BigIntegerField()),
                ('userid', models.IntegerField(db_column='userid')),
            ],
            options={
                'db_table': 'vw_select_time_detail_sidebar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VwSelectTimeIndexSidebar',
            fields=[
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('column2', models.CharField(blank=True, max_length=53)),
                ('id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('column4', models.BigIntegerField()),
                ('userid', models.CharField(db_column='userid', max_length=8)),
            ],
            options={
                'db_table': 'vw_select_time_index_sidebar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VwSelectUserDetailSidebar',
            fields=[
                ('description', models.CharField(max_length=11)),
                ('column2', models.CharField(blank=True, max_length=40)),
                ('id', models.CharField(max_length=1, primary_key=True, serialize=False)),
                ('column4', models.BigIntegerField()),
                ('userid', models.IntegerField(db_column='userid')),
            ],
            options={
                'db_table': 'vw_select_user_detail_sidebar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VwSelectUserIndexSidebar',
            fields=[
                ('username', models.CharField(db_column='username', max_length=100)),
                ('column2', models.CharField(blank=True, max_length=40)),
                ('id', models.CharField(max_length=8, primary_key=True, serialize=False)),
                ('column4', models.BigIntegerField()),
                ('userid', models.CharField(db_column='userid', max_length=8)),
            ],
            options={
                'db_table': 'vw_select_user_index_sidebar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('accountid', models.AutoField(db_column='accountid', primary_key=True, serialize=False)),
                ('accountname', models.CharField(db_column='accountname', max_length=100)),
                ('authenticationid', models.CharField(blank=True, db_column='authenticationid', max_length=45, null=True)),
                ('authenticationid2', models.CharField(blank=True, db_column='authenticationid2', max_length=45, null=True)),
                ('authenticationid3', models.CharField(blank=True, db_column='authenticationid3', max_length=45, null=True)),
                ('membershiptypeid', models.IntegerField(db_column='membershiptypeid')),
                ('membershiprenewaldate', models.DateTimeField(blank=True, db_column='membershiprenewaldate', null=True)),
                ('firstname', models.CharField(blank=True, max_length=50, null=True)),
                ('lastname', models.CharField(blank=True, max_length=50, null=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.CharField(blank=True, max_length=75, null=True)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updatedate', models.DateTimeField(blank=True, db_column='updatedate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'account',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('answerid', models.AutoField(db_column='answerid', primary_key=True, serialize=False)),
                ('questionid', models.IntegerField(db_column='questionid')),
                ('answer', models.CharField(max_length=5000)),
                ('createddate', models.DateTimeField(blank=True, db_column='createddate', null=True)),
                ('createdby', models.IntegerField(blank=True, db_column='createdby', null=True)),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'answer',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.IntegerField(db_column='userid')),
                ('itemid', models.IntegerField(db_column='itemid')),
                ('itemtype', models.IntegerField(db_column='itemtype')),
                ('columnno', models.IntegerField(db_column='columnno')),
                ('itemorder', models.IntegerField(db_column='itemorder')),
            ],
            options={
                'db_table': 'board',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('clientid', models.AutoField(db_column='clientid', primary_key=True, serialize=False)),
                ('userid', models.IntegerField(db_column='userid')),
                ('clientname', models.CharField(db_column='clientname', max_length=100)),
                ('address1', models.CharField(max_length=45)),
                ('address2', models.CharField(max_length=45)),
                ('address3', models.CharField(max_length=45)),
                ('city', models.CharField(max_length=45)),
                ('region', models.CharField(max_length=45)),
                ('country', models.CharField(max_length=50)),
                ('postcode', models.CharField(max_length=45)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updatedate', models.DateTimeField(blank=True, db_column='updatedate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('accountid', models.ForeignKey(db_column='accountid', on_delete=django.db.models.deletion.CASCADE, to='simpris.Account')),
            ],
            options={
                'db_table': 'client',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('commentid', models.AutoField(db_column='commentid', primary_key=True, serialize=False)),
                ('parentid', models.IntegerField(db_column='parentid')),
                ('parenttypeid', models.IntegerField(db_column='parenttypeid')),
                ('commenttypeid', models.IntegerField(db_column='commenttypeid')),
                ('commenttext', models.CharField(db_column='commenttext', max_length=5000)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'comment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('countryid', models.IntegerField(db_column='countryid', primary_key=True, serialize=False)),
                ('countryname', models.CharField(db_column='countryname', max_length=100, unique=True)),
            ],
            options={
                'db_table': 'country',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('documentid', models.AutoField(db_column='documentid', primary_key=True, serialize=False)),
                ('documenttypeid', models.IntegerField(db_column='documenttypeid')),
                ('documentparentid', models.IntegerField(db_column='documentparentid')),
                ('documentname', models.CharField(db_column='documentname', max_length=100)),
                ('documentfilename', models.CharField(db_column='documentFilename', max_length=100)),
                ('documenttitle', models.CharField(blank=True, db_column='documentTitle', max_length=100, null=True)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'document',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Error',
            fields=[
                ('id', models.IntegerField(db_column='errorid', primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('userid', models.IntegerField(db_column='userid')),
                ('description', models.CharField(db_column='description', max_length=500)),
                ('module', models.CharField(db_column='module', max_length=10)),
                ('submodule', models.CharField(db_column='submodule', max_length=10)),
                ('action', models.CharField(db_column='action', max_length=10)),
                ('subaction', models.CharField(db_column='subaction', max_length=10)),
                ('createddate', models.DateTimeField(db_column='createddate')),
            ],
            options={
                'db_table': 'error',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Groups',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'groups',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Idea',
            fields=[
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('parentid', models.IntegerField(db_column='parentid')),
                ('parenttypeid', models.IntegerField(db_column='parenttypeid')),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'idea',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='IdeaMap',
            fields=[
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'ideamap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Interaction',
            fields=[
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('interactionid', models.IntegerField(primary_key=True, serialize=False)),
                ('userid', models.IntegerField(db_column='userid')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('interactiontypeid', models.CharField(db_column='interactiontypeid', max_length=50)),
                ('details', models.CharField(blank=True, db_column='details', max_length=4000, null=True)),
            ],
            options={
                'db_table': 'interaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('invoiceid', models.AutoField(db_column='invoiceid', primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('userid', models.IntegerField(db_column='userid')),
                ('statusid', models.IntegerField(db_column='statusid')),
                ('supersededby', models.IntegerField(blank=True, db_column='supersededby', null=True)),
                ('description', models.CharField(max_length=50)),
                ('comments', models.CharField(max_length=500)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('invoicecol', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'invoice',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Invoiceline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoiceid', models.IntegerField(db_column='invoiceid')),
                ('lineno', models.IntegerField(db_column='lineno')),
                ('taskid', models.IntegerField(db_column='taskid')),
                ('timeid', models.IntegerField(db_column='timeid')),
                ('itemdescription', models.CharField(db_column='itemdescription', max_length=150)),
                ('tax1rate', models.DecimalField(db_column='tax1rate', decimal_places=2, max_digits=10)),
                ('tax2rate', models.DecimalField(db_column='tax2rate', decimal_places=2, max_digits=10)),
                ('tax3rate', models.DecimalField(db_column='tax3rate', decimal_places=2, max_digits=10)),
                ('hourlyrate', models.DecimalField(db_column='hourlyrate', decimal_places=2, max_digits=10)),
                ('nohours', models.DecimalField(db_column='nohours', decimal_places=1, max_digits=10)),
                ('agreedrate', models.DecimalField(db_column='agreedrate', decimal_places=1, max_digits=10)),
                ('tax1', models.DecimalField(decimal_places=2, max_digits=10)),
                ('tax2', models.DecimalField(decimal_places=2, max_digits=10)),
                ('tax3', models.DecimalField(decimal_places=2, max_digits=10)),
                ('grosstotal', models.DecimalField(db_column='grosstotal', decimal_places=2, max_digits=10)),
                ('nettotal', models.DecimalField(db_column='nettotal', decimal_places=2, max_digits=10)),
            ],
            options={
                'db_table': 'invoiceline',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('entityid', models.IntegerField(db_column='entityid')),
                ('entitytype', models.CharField(db_column='entitytype', max_length=4)),
                ('link_name', models.CharField(db_column='link_name', max_length=100)),
                ('link_url', models.CharField(db_column='link_url', max_length=100)),
                ('link_target', models.CharField(db_column='link_target', max_length=20)),
            ],
            options={
                'db_table': 'link',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LoginAttempts',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('ip_address', models.CharField(max_length=16)),
                ('login', models.CharField(max_length=100)),
                ('time', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'login_attempts',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Lookup',
            fields=[
                ('clientid', models.IntegerField(db_column='clientid')),
                ('lookuptypeid', models.IntegerField(db_column='lookuptypeid')),
                ('lookupsubtypeid', models.IntegerField(db_column='lookupsubtypeid')),
                ('lookuporder', models.IntegerField(db_column='lookuporder')),
                ('lookupvaluenum', models.IntegerField(blank=True, db_column='lookupvaluenum', null=True)),
                ('lookupvaluechar', models.CharField(blank=True, db_column='lookupvaluechar', max_length=50, null=True)),
                ('lookupdescription', models.CharField(db_column='lookupdescription', max_length=200)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'lookup',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LookupType',
            fields=[
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
                ('lookuptype', models.CharField(db_column='lookuptype', max_length=100)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'lookup_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Meta',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('mainorganisationid', models.IntegerField(blank=True, db_column='mainorganisationid', null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'db_table': 'meta',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Opinion',
            fields=[
                ('opinionid', models.AutoField(db_column='opinionid', primary_key=True, serialize=False)),
                ('userid', models.IntegerField(db_column='userid')),
                ('itemtype', models.IntegerField(db_column='itemtype')),
                ('itemid', models.IntegerField(db_column='itemid')),
                ('opiniontype', models.IntegerField(blank=True, db_column='opiniontype', null=True)),
                ('opinion', models.CharField(blank=True, max_length=250, null=True)),
                ('createddate', models.DateTimeField(blank=True, db_column='createddate', null=True)),
                ('createdby', models.IntegerField(blank=True, db_column='createdby', null=True)),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'opinion',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('organisationid', models.AutoField(db_column='organisationid', primary_key=True, serialize=False)),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('clientid', models.ForeignKey(db_column='clientid', on_delete=django.db.models.deletion.DO_NOTHING, to='simpris.Client')),
            ],
            options={
                'db_table': 'organisation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OrganisationArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('organisationname', models.CharField(db_column='organisationname', max_length=100)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'organisation_archive',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Payrate',
            fields=[
                ('payrateid', models.AutoField(db_column='payrateid', primary_key=True, serialize=False)),
                ('payratedescription', models.CharField(db_column='payratedescription', max_length=20)),
                ('rate', models.DecimalField(decimal_places=2, max_digits=10)),
                ('rateper', models.IntegerField()),
                ('tasktype', models.IntegerField(blank=True, db_column='tasktype', null=True)),
                ('effectivedate', models.DateTimeField(db_column='effectiveDate')),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updatedate', models.DateTimeField(blank=True, db_column='updatedate', null=True)),
                ('updateby', models.IntegerField(blank=True, db_column='updateby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'payrate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Phase',
            fields=[
                ('phaseid', models.AutoField(db_column='phaseid', primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('phasename', models.CharField(db_column='phasename', max_length=50)),
                ('phasedescription', models.CharField(blank=True, db_column='phasedescription', max_length=500, null=True)),
                ('enddate', models.DateTimeField(blank=True, db_column='enddate', null=True)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'phase',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('problemid', models.AutoField(db_column='problemid', primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('problemtypeid', models.IntegerField(db_column='problemtypeid')),
                ('problemsubtypeid', models.IntegerField(blank=True, db_column='problemsubtypeid', null=True)),
                ('problemheader', models.CharField(db_column='problemheader', max_length=50)),
                ('problemdescription', models.CharField(db_column='problemdescription', max_length=2000)),
                ('noofpeopleaffected', models.IntegerField(db_column='noofpeopleaffected')),
                ('scope', models.IntegerField()),
                ('problemstatusid', models.IntegerField(blank=True, db_column='problemstatusid', null=True)),
                ('problempriorityid', models.IntegerField(blank=True, db_column='problempriorityid', null=True)),
                ('queueid', models.IntegerField(blank=True, db_column='queueid', null=True)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('completeddate', models.DateTimeField(blank=True, db_column='completeddate', null=True)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('organisationid', models.ForeignKey(db_column='organisationid', on_delete=django.db.models.deletion.DO_NOTHING, to='simpris.Organisation')),
            ],
            options={
                'db_table': 'problem',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProblemArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problemid', models.IntegerField(db_column='problemid')),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('problemtypeid', models.IntegerField(db_column='problemtypeid')),
                ('problemsubtypeid', models.IntegerField(blank=True, db_column='problemsubtypeid', null=True)),
                ('problemheader', models.CharField(db_column='problemheader', max_length=50)),
                ('problemdescription', models.CharField(db_column='problemdescription', max_length=2000)),
                ('noofpeopleaffected', models.IntegerField(db_column='noofpeopleaffected')),
                ('scope', models.IntegerField()),
                ('problemstatusid', models.IntegerField(blank=True, db_column='problemstatusid', null=True)),
                ('problempriorityid', models.IntegerField(blank=True, db_column='problempriorityid', null=True)),
                ('queueid', models.IntegerField(blank=True, db_column='queueid', null=True)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('completeddate', models.DateTimeField(blank=True, db_column='completeddate', null=True)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'problem_archive',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Problemlink',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('problemid', models.IntegerField(db_column='problemid')),
                ('problemlinkid', models.IntegerField(db_column='problemlinkid')),
                ('problemlinktype', models.IntegerField(db_column='problemlinktype')),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'problemlink',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Programme',
            fields=[
                ('programmeid', models.AutoField(db_column='programmeid', primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('programmename', models.CharField(db_column='programmename', max_length=50)),
                ('programmedescription', models.CharField(blank=True, db_column='programmedescription', max_length=500, null=True)),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'programme',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('projectid', models.AutoField(db_column='projectid', primary_key=True, serialize=False)),
                ('programmeid', models.IntegerField(blank=True, db_column='programmeid', null=True)),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('projectdescription', models.CharField(blank=True, db_column='projectdescription', max_length=500, null=True)),
                ('stakeholderid', models.IntegerField(blank=True, db_column='stakeholderid', null=True)),
                ('projectmanagerid', models.IntegerField(blank=True, db_column='projectmanagerid', null=True)),
                ('deliverables', models.CharField(blank=True, max_length=1500, null=True)),
                ('budget', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True)),
                ('importance', models.IntegerField(blank=True, null=True)),
                ('organisationid', models.ForeignKey(db_column='organisationid', on_delete=django.db.models.deletion.DO_NOTHING, to='simpris.Organisation')),
            ],
            options={
                'db_table': 'project',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProjectArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('organisationid', models.IntegerField(db_column='organisationid')),
                ('programmeid', models.IntegerField(blank=True, db_column='programmeid', null=True)),
                ('projectname', models.CharField(db_column='projectname', max_length=50)),
                ('projectdescription', models.CharField(blank=True, db_column='projectdescription', max_length=500, null=True)),
                ('stakeholderid', models.IntegerField(blank=True, db_column='stakeholderid', null=True)),
                ('projectmanagerid', models.IntegerField(blank=True, db_column='projectmanagerid', null=True)),
                ('deliverables', models.CharField(blank=True, max_length=1500, null=True)),
                ('budget', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True)),
                ('importance', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'project_archive',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('questionid', models.AutoField(db_column='questionid', primary_key=True, serialize=False)),
                ('questionname', models.CharField(blank=True, db_column='questionname', max_length=45, null=True)),
                ('questiontext', models.CharField(blank=True, db_column='questiontext', max_length=5000, null=True)),
                ('createddate', models.DateTimeField(blank=True, db_column='createddate', null=True)),
                ('createdby', models.IntegerField(blank=True, db_column='createdby', null=True)),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
            ],
            options={
                'db_table': 'question',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Questionnaire',
            fields=[
                ('questionnaireid', models.AutoField(db_column='questionnaireid', primary_key=True, serialize=False)),
                ('questionnairename', models.CharField(db_column='questionnairename', max_length=45)),
                ('contactuserid', models.IntegerField(db_column='contactuserid')),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'questionnaire',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('questionnaireid', models.IntegerField(db_column='questionnaireid')),
                ('questionid', models.IntegerField(db_column='questionid')),
                ('createddate', models.DateTimeField(blank=True, db_column='createddate', null=True)),
                ('createdby', models.IntegerField(blank=True, db_column='createdby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'questionnaire_question',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Queue',
            fields=[
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('queueid', models.AutoField(db_column='queueid', primary_key=True, serialize=False)),
                ('queuename', models.CharField(db_column='queuename', max_length=45)),
                ('queuedescription', models.CharField(blank=True, db_column='queuedescription', max_length=450, null=True)),
            ],
            options={
                'db_table': 'queue',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='QueueUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('queueuserid', models.IntegerField(db_column='queueuserid')),
                ('createdby', models.IntegerField(blank=True, db_column='createdby', null=True)),
                ('createddate', models.DateTimeField(blank=True, db_column='createddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('queueid', models.ForeignKey(db_column='queueid', on_delete=django.db.models.deletion.DO_NOTHING, to='simpris.Queue')),
            ],
            options={
                'db_table': 'queue_user',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('statusid', models.IntegerField(db_column='statusid', primary_key=True, serialize=False)),
                ('userid', models.IntegerField(blank=True, db_column='userid', null=True)),
                ('itemid', models.IntegerField(blank=True, db_column='itemid', null=True)),
                ('itemtype', models.IntegerField(blank=True, db_column='itemtype', null=True)),
                ('status', models.IntegerField(blank=True, null=True)),
                ('statuscol', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'status',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('taskid', models.AutoField(db_column='taskid', primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('tasktypeid', models.IntegerField(db_column='tasktypeid')),
                ('taskname', models.CharField(db_column='taskname', max_length=50)),
                ('taskdescription', models.CharField(db_column='taskdescription', max_length=10000)),
                ('taskstatusid', models.IntegerField(blank=True, db_column='taskstatusid', null=True)),
                ('taskpriorityid', models.IntegerField(blank=True, db_column='taskpriorityid', null=True)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('taskstartdate', models.DateTimeField(blank=True, db_column='taskstartdate', null=True)),
                ('tasktimeestimate', models.DecimalField(blank=True, db_column='tasktimeestimate', decimal_places=1, max_digits=10, null=True)),
                ('taskpercentcomplete', models.IntegerField(blank=True, db_column='taskpercentcomplete', null=True)),
                ('completiondate', models.DateTimeField(blank=True, db_column='completiondate', null=True)),
                ('phaseid', models.IntegerField(blank=True, db_column='phaseid', null=True)),
                ('tasklinkid', models.IntegerField(blank=True, db_column='tasklinkid', null=True)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'task',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TaskArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taskid', models.IntegerField(db_column='taskid')),
                ('tasklistid', models.IntegerField(db_column='tasklistid')),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('tasktypeid', models.IntegerField(db_column='tasktypeid')),
                ('taskname', models.CharField(blank=True, db_column='taskname', max_length=50, null=True)),
                ('taskdescription', models.CharField(db_column='taskdescription', max_length=500)),
                ('taskstatusid', models.IntegerField(blank=True, db_column='taskstatusid', null=True)),
                ('taskpriorityid', models.IntegerField(blank=True, db_column='taskpriorityid', null=True)),
                ('assignedto', models.IntegerField(blank=True, db_column='assignedto', null=True)),
                ('taskstartdate', models.DateTimeField(blank=True, db_column='taskstartdate', null=True)),
                ('tasktimeestimate', models.DecimalField(blank=True, db_column='tasktimeestimate', decimal_places=1, max_digits=10, null=True)),
                ('taskpercentcomplete', models.IntegerField(blank=True, db_column='taskpercentcomplete', null=True)),
                ('completiondate', models.DateTimeField(blank=True, db_column='completiondate', null=True)),
                ('phaseid', models.IntegerField(blank=True, db_column='phaseid', null=True)),
                ('tasklinkid', models.IntegerField(blank=True, db_column='tasklinkid', null=True)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'task_archive',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tasklist',
            fields=[
                ('tasklistid', models.AutoField(db_column='tasklistid', primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('tasklistname', models.CharField(db_column='tasklistname', max_length=50)),
                ('tasklistdescription', models.CharField(blank=True, db_column='tasklistdescription', max_length=500, null=True)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('projectid', models.ForeignKey(db_column='projectid', on_delete=django.db.models.deletion.DO_NOTHING, to='simpris.Project')),
            ],
            options={
                'db_table': 'tasklist',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TasklistArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tasklistid', models.IntegerField(db_column='tasklistid')),
                ('projectid', models.IntegerField(db_column='projectid')),
                ('clientid', models.IntegerField(blank=True, db_column='clientid', null=True)),
                ('tasklistname', models.CharField(db_column='tasklistname', max_length=50)),
                ('tasklistdescription', models.CharField(blank=True, db_column='tasklistdescription', max_length=500, null=True)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedid', models.IntegerField(blank=True, db_column='updatedid', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'tasklist_archive',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Taskstep',
            fields=[
                ('taskstepid', models.AutoField(db_column='taskstepid', primary_key=True, serialize=False)),
                ('taskid', models.IntegerField(blank=True, db_column='taskid', null=True)),
                ('steporder', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'taskstep',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TaskTemplate',
            fields=[
                ('tasktemplateid', models.AutoField(db_column='tasktemplateid', primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(blank=True, db_column='clientid', null=True)),
                ('tasktemplatename', models.CharField(blank=True, db_column='tasktemplatename', max_length=100, null=True)),
                ('createddate', models.DateTimeField(blank=True, db_column='createddate', null=True)),
                ('createdby', models.IntegerField(blank=True, db_column='createdby', null=True)),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'task_template',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Taxrate',
            fields=[
                ('taxrateid', models.AutoField(db_column='taxrateid', primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('taxratedescription', models.CharField(db_column='taxratedescription', max_length=100)),
                ('taxrate', models.DecimalField(decimal_places=2, max_digits=10)),
                ('effectivedate', models.DateTimeField(db_column='effectiveDate')),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
            ],
            options={
                'db_table': 'taxrate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('teamid', models.AutoField(db_column='teamid', primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('teamname', models.CharField(db_column='teamname', max_length=100)),
                ('teamdescription', models.CharField(blank=True, db_column='teamdescription', max_length=1000, null=True)),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
            ],
            options={
                'db_table': 'team',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TeamQueue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('createdby', models.IntegerField(blank=True, db_column='createdby', null=True)),
                ('createddate', models.DateTimeField(blank=True, db_column='createddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('queueid', models.ForeignKey(db_column='queueid', on_delete=django.db.models.deletion.DO_NOTHING, to='simpris.Queue')),
                ('queueteamid', models.ForeignKey(db_column='queueteamid', on_delete=django.db.models.deletion.DO_NOTHING, to='simpris.Team')),
            ],
            options={
                'db_table': 'queue_team',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TeamUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teamid', models.IntegerField(db_column='teamid')),
                ('userid', models.IntegerField(db_column='userid')),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
            ],
            options={
                'db_table': 'team_user',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TestTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('testint', models.IntegerField()),
            ],
            options={
                'db_table': 'test_table',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Time',
            fields=[
                ('timeid', models.AutoField(db_column='timeid', primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('timeday', models.DateTimeField(db_column='timeday')),
                ('hours', models.FloatField()),
                ('timetypeid', models.IntegerField(db_column='timetypeid')),
                ('userid', models.IntegerField(db_column='userid')),
                ('comments', models.CharField(blank=True, max_length=50, null=True)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('taskid', models.ForeignKey(db_column='taskid', on_delete=django.db.models.deletion.DO_NOTHING, to='simpris.Task')),
            ],
            options={
                'db_table': 'time',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Useractivity',
            fields=[
                ('activityid', models.AutoField(db_column='activityid', primary_key=True, serialize=False)),
                ('userid', models.IntegerField(db_column='userid')),
                ('activitytype', models.CharField(db_column='activitytype', max_length=10)),
                ('activitydata', models.CharField(blank=True, db_column='activitydata', max_length=100, null=True)),
                ('activity_module', models.CharField(blank=True, db_column='activity_module', max_length=10, null=True)),
                ('activity_submodule', models.CharField(db_column='activity_submodule', max_length=10)),
                ('client_id', models.IntegerField(blank=True, db_column='client_id', null=True)),
                ('activitydate', models.DateTimeField(db_column='activityDate')),
            ],
            options={
                'db_table': 'useractivity',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserAttributes',
            fields=[
                ('userid', models.IntegerField(db_column='userid', primary_key=True, serialize=False)),
                ('vip', models.CharField(max_length=1)),
                ('countryid', models.IntegerField(blank=True, db_column='countryid', null=True)),
                ('mobilephoneno', models.CharField(blank=True, db_column='mobilephoneno', max_length=20, null=True)),
                ('faxno', models.CharField(blank=True, db_column='faxno', max_length=20, null=True)),
                ('photo', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'user_attributes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.IntegerField(db_column='userid')),
                ('lookuptypeid', models.IntegerField(db_column='lookuptypeid')),
                ('configurationdata', models.CharField(db_column='configurationdata', max_length=50)),
                ('configurationdatanum', models.FloatField(db_column='configurationdataNum')),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(db_column='updateddate')),
                ('updatedby', models.IntegerField(db_column='updatedby')),
                ('deleteddate', models.DateTimeField(db_column='deleteddate')),
                ('deletedby', models.IntegerField(db_column='deletedby')),
            ],
            options={
                'db_table': 'user_configuration',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserCookie',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('userid', models.BigIntegerField(db_column='userid')),
                ('uuid', models.CharField(db_column='uuid', max_length=128)),
                ('username', models.CharField(max_length=100)),
                ('password', models.CharField(max_length=40)),
                ('created_on', models.DateTimeField()),
            ],
            options={
                'db_table': 'user_cookie',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Userorganisation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.IntegerField(db_column='userid')),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('organisationid', models.ForeignKey(db_column='organisationid', on_delete=django.db.models.deletion.DO_NOTHING, to='simpris.Organisation')),
            ],
            options={
                'db_table': 'userorganisation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserPayrate',
            fields=[
                ('userid', models.IntegerField(db_column='userid', primary_key=True, serialize=False)),
                ('payrateid', models.IntegerField(db_column='payrateid')),
                ('effectivedate', models.DateTimeField(db_column='effectiveDate')),
                ('defaultrate', models.DecimalField(blank=True, db_column='defaultrate', decimal_places=2, max_digits=10, null=True)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
            ],
            options={
                'db_table': 'user_payrate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Userproject',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('userid', models.IntegerField(db_column='userid')),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
                ('projectid', models.ForeignKey(db_column='projectid', on_delete=django.db.models.deletion.DO_NOTHING, to='simpris.Project')),
            ],
            options={
                'db_table': 'userproject',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Userreport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.IntegerField(db_column='userid')),
                ('reportid', models.IntegerField(db_column='reportid')),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
                ('deleteddate', models.DateTimeField(blank=True, db_column='deleteddate', null=True)),
                ('deletedby', models.IntegerField(blank=True, db_column='deletedby', null=True)),
            ],
            options={
                'db_table': 'userreport',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('ip_address', models.CharField(max_length=16)),
                ('username', models.CharField(max_length=100, unique=True)),
                ('password', models.CharField(max_length=40)),
                ('salt', models.CharField(blank=True, max_length=40, null=True)),
                ('email', models.CharField(max_length=100, unique=True)),
                ('activation_code', models.CharField(blank=True, max_length=40, null=True)),
                ('forgotten_password_code', models.CharField(blank=True, max_length=40, null=True)),
                ('forgotten_password_time', models.IntegerField(blank=True, null=True)),
                ('remember_code', models.CharField(blank=True, max_length=40, null=True)),
                ('created_on', models.IntegerField()),
                ('last_login', models.IntegerField(blank=True, null=True)),
                ('active', models.IntegerField(blank=True, null=True)),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('company', models.IntegerField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'db_table': 'users',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UsersArchive',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('clientid', models.IntegerField(db_column='clientid')),
                ('ip_address', models.CharField(max_length=16)),
                ('username', models.CharField(max_length=100)),
                ('password', models.CharField(max_length=40)),
                ('salt', models.CharField(blank=True, max_length=40, null=True)),
                ('email', models.CharField(max_length=100)),
                ('activation_code', models.CharField(blank=True, max_length=40, null=True)),
                ('forgotten_password_code', models.CharField(blank=True, max_length=40, null=True)),
                ('forgotten_password_time', models.IntegerField(blank=True, null=True)),
                ('remember_code', models.CharField(blank=True, max_length=40, null=True)),
                ('created_on', models.IntegerField()),
                ('last_login', models.IntegerField(blank=True, null=True)),
                ('active', models.IntegerField(blank=True, null=True)),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('company', models.IntegerField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'db_table': 'users_archive',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UsersGroups',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField()),
                ('group_id', models.IntegerField()),
            ],
            options={
                'db_table': 'users_groups',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserStatus',
            fields=[
                ('statusid', models.IntegerField(db_column='statusid', primary_key=True, serialize=False)),
                ('userid', models.IntegerField(blank=True, db_column='userid', null=True)),
                ('itemid', models.IntegerField(blank=True, db_column='itemid', null=True)),
                ('itemtype', models.IntegerField(blank=True, db_column='itemtype', null=True)),
                ('status', models.IntegerField(blank=True, null=True)),
                ('statuscol', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'user_status',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Usertask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.IntegerField(db_column='userid')),
                ('taskid', models.ForeignKey(db_column='taskid', on_delete=django.db.models.deletion.DO_NOTHING, to='simpris.Task')),
            ],
            options={
                'db_table': 'usertask',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserTaxrate',
            fields=[
                ('userid', models.IntegerField(db_column='userid', primary_key=True, serialize=False)),
                ('taxrateid', models.DecimalField(db_column='taxrateid', decimal_places=2, max_digits=10)),
                ('effectivedate', models.DateTimeField(blank=True, db_column='effectiveDate', null=True)),
                ('defaultrate', models.DecimalField(blank=True, db_column='defaultrate', decimal_places=2, max_digits=10, null=True)),
                ('createddate', models.DateTimeField(db_column='createddate')),
                ('createdby', models.IntegerField(db_column='createdby')),
                ('updateddate', models.DateTimeField(blank=True, db_column='updateddate', null=True)),
                ('updatedby', models.IntegerField(blank=True, db_column='updatedby', null=True)),
            ],
            options={
                'db_table': 'user_taxrate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProblemLog',
            fields=[
                ('comment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='simpris.Comment')),
                ('authuser', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='simpris.AuthUser')),
            ],
            options={
                'managed': True,
            },
            bases=('simpris.comment',),
        ),
        migrations.AlterUniqueTogether(
            name='userstatus',
            unique_together={('userid', 'itemid', 'itemtype')},
        ),
        migrations.AlterUniqueTogether(
            name='userconfiguration',
            unique_together={('userid', 'lookuptypeid')},
        ),
        migrations.AlterUniqueTogether(
            name='tasktemplate',
            unique_together={('tasktemplatename', 'clientid')},
        ),
        migrations.AlterUniqueTogether(
            name='taskstep',
            unique_together={('taskid', 'steporder')},
        ),
        migrations.AddField(
            model_name='task',
            name='tasklistid',
            field=models.ForeignKey(db_column='tasklistid', on_delete=django.db.models.deletion.DO_NOTHING, to='simpris.Tasklist'),
        ),
        migrations.AlterUniqueTogether(
            name='status',
            unique_together={('userid', 'itemid', 'itemtype')},
        ),
        migrations.AlterUniqueTogether(
            name='questionnairequestion',
            unique_together={('questionnaireid', 'questionid')},
        ),
        migrations.AlterUniqueTogether(
            name='opinion',
            unique_together={('userid', 'itemtype', 'itemid')},
        ),
        migrations.AlterUniqueTogether(
            name='invoiceline',
            unique_together={('invoiceid', 'lineno')},
        ),
        migrations.AlterUniqueTogether(
            name='account',
            unique_together={('accountname', 'email')},
        ),
        migrations.AlterUniqueTogether(
            name='usertask',
            unique_together={('userid', 'taskid')},
        ),
        migrations.AlterUniqueTogether(
            name='userorganisation',
            unique_together={('userid', 'organisationid')},
        ),
        migrations.AlterUniqueTogether(
            name='tasklist',
            unique_together={('projectid', 'tasklistname'), ('tasklistname', 'projectid')},
        ),
    ]
